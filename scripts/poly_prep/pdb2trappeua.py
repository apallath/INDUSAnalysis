"""
Reads alkane PDB file and generates GROMACS structure file (.gro) and residue topology
(.rtp) file for use with the TRAPPE-UA force field.
"""
import argparse
import MDAnalysis as mda

parser = argparse.ArgumentParser()
parser.add_argument("pdbname", help="PDB file name/path")
parser.add_argument("-inres", default="UNL", help="name of residue to read")
parser.add_argument("-outres", default="ALK", help="name of residue to write (OUTRES.gro, OUTRES.rtp)")

attrs = parser.add_argument_group("Topology attributes")
attrs.add_argument("-bonds", default="1", help="Interaction type for bonds")
attrs.add_argument("-angles", default="1", help="Interaction type for angles")
attrs.add_argument("-dihedrals", default="3", help="Interaction type for dihedrals")
attrs.add_argument("-impropers", default="1", help="Interaction type for impropers")
attrs.add_argument("-all_dihedrals", default="1", help="Interaction type for all_dihedrals")
attrs.add_argument("-nrexcl", default="3", help="nrexcl (default=Ignore 1-4 interactions)")
attrs.add_argument("-HH14", default="1")
attrs.add_argument("-RemoveDih", default="0")

args = parser.parse_args()

# Check that resname is <= 3 letters
if len(args.outres) > 3:
    raise ValueError("Output residue name can have at most 3 characters.")

# Read PDB with CONECT entries
u = mda.Universe(args.pdbname, args.pdbname)
res = u.select_atoms("resname {}".format(args.inres))

# Idenfity atom type based on degree of branching
for atom in res.atoms:
    atom.residue.resname = args.outres
    atom.name = "C{}".format(atom.id)
    if len(atom.bonds) == 0:
        atom.type == "CH4"
    elif len(atom.bonds) == 1:
        atom.type = "CH3_C"
    elif len(atom.bonds) == 2:
        atom.type = "CH2_C"
    elif len(atom.bonds) == 3:
        atom.type = "CH_C"
    elif len(atom.bonds) == 4:
        atom.type = "C_C"
    else:
        raise ValueError("Cannot handle carbon with more than 5 bonds.")

# Write structure file
res.write(args.outres + ".gro")

# Write residue topology file
with open(args.outres + ".rtp", "w") as rtp:
    rtp.write("; Generated by INDUSAnalysis (github.com/apallath/INDUSAnalysis)\n\n")
    rtp.write("[ bondedtypes ]\n")
    rtp.write("; bonds  angles  dihedrals  impropers all_dihedrals nrexcl HH14 RemoveDihs\n")
    rtp.write("  {}      {}       {}          {}         {}             {}      {}    {} \n\n".format(args.bonds,
              args.angles, args.dihedrals, args.impropers, args.all_dihedrals, args.nrexcl, args.HH14, args.RemoveDih))
    rtp.write("[ {} ]\n".format(args.outres))
    rtp.write("  [ atoms ]\n")
    for atom in res.atoms:
        rtp.write("    {}\t\t{}\t{}\t{}\n".format(atom.name, atom.type, "0.000", atom.id))

    rtp.write("\n  [ bonds ]\n")
    for bond in res.bonds:
        atoms = []
        for atom in bond:
            atoms.append(atom.name)
        rtp.write("    {}\t{}\n".format(atoms[0], atoms[1]))
